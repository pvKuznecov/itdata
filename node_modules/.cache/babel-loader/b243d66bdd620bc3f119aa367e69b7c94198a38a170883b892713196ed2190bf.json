{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, createStaticVNode as _createStaticVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createStaticVNode(\"<main><div class=\\\"iblock\\\"><p><b>Фреймворк</b> - это некая программная платформа, определяющая структуру программной системы; ПО (программное обеспечение), облегчающее разработку и объединяющее различные компоненты большого программного проекта.</p><p> В случае использования фреймворков в процессе разработки, можно сказать, что &quot;используется каркасный подход&quot; построения программ. В таком случае любая конфигурация программы строится из двух частей: <ul><li>Постоянная часть — каркас, не меняющийся от конфигурации к конфигурации и несущий в себе гнёзда, в которых размещается вторая, переменная часть;</li><li>Сменные модули (или точки расширения).</li></ul> Понятие &quot;фреймворк&quot; отличается от понятия &quot;библиотека&quot; тем, что последнее может быть использована в программном продукте просто как набор подпрограмм, не влияя на архитектуру программного продукта и не накладывая на неё никаких ограничений. В то время как фреймворк определяет правила архитектуры приложения, определяя на начальном этапе разработки «каркас», который нужно будет расширять и изменять согласно указанным требованиям. Также, в отличие от библиотеки, которая объединяет в себе набор близкой функциональности, — «фреймворк» может содержать в себе большое число разных по тематике библиотек. </p><br><p><b>JavaScript-фреймворки</b> — это фреймворки для приложений, написанные на языке программирования JavaScript. JavaScript-фреймворки отличается от Javascript-библиотек потоком управления. Они являются неотъемлемой частью современной веб-разработки, предоставляя разработчикам проверенные и протестированные инструменты для создания масштабируемых и интерактивных веб-приложений. Многие современные компании используют фреймворки для своих решений, поэтому многие задачи связанные с разработкой клиентской части веб-приложений теперь требуют опыта работы с ними.</p><p> Фреймворки JavaScript имеют ряд преимуществ, которые обеспечивают более эффективную и организованную разработку. <ul><li><b>Ускорение разработки</b> - предоставляются готовые решения для общих задач (маршрутизация, управление состоянием и взаимодействие с сервером), что позволяет разработчику сосредоточиться на над своими индивидуальными задачами, не тратя время на реализацию базовых функций.</li><br><li><b>Организация кода</b> - обычно имеются структуру и рекомендации по организации кода, способствующие поддерживаемости и расширяемости приложений.</li><li><b>Поддержка сообщества</b> - популярные фреймворки быстро формируют большие сообщества разработчиков, которые предлагают поддержку, обучение и ресурсы, что облегчает поиск решений для проблем и ускоряет процесс разработки.</li></ul></p></div></main>\", 1);\nexport function render(_ctx, _cache) {\n  const _component_PagetitleComponent = _resolveComponent(\"PagetitleComponent\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_PagetitleComponent, {\n    titleName: _ctx.areaName\n  }, null, 8 /* PROPS */, [\"titleName\"]), _hoisted_1], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createStaticVNode","_createElementBlock","_Fragment","_createVNode","_component_PagetitleComponent","titleName","_ctx","areaName","_hoisted_1"],"sources":["/home/kup/my_projects/vue/itdata/src/views/JsframeworksView/JsframeworksView.html"],"sourcesContent":["<PagetitleComponent :titleName=\"areaName\"/>\n<main>\n    <div class=\"iblock\">\n        <p><b>Фреймворк</b> - это некая программная платформа, определяющая структуру программной системы; ПО (программное обеспечение), облегчающее разработку и объединяющее различные компоненты большого программного проекта.</p>\n        <p>\n            В случае использования фреймворков в процессе разработки, можно сказать, что \"используется каркасный подход\" построения программ. В таком случае любая конфигурация программы строится из двух частей:\n            <ul>\n                <li>Постоянная часть — каркас, не меняющийся от конфигурации к конфигурации и несущий в себе гнёзда, в которых размещается вторая, переменная часть;</li>\n                <li>Сменные модули (или точки расширения).</li>\n            </ul>\n            Понятие \"фреймворк\" отличается от понятия \"библиотека\" тем, что последнее может быть использована в программном продукте просто как набор подпрограмм, не влияя на архитектуру программного продукта и не накладывая на неё никаких ограничений. В то время как фреймворк определяет правила архитектуры приложения, определяя на начальном этапе разработки «каркас», который нужно будет расширять и изменять согласно указанным требованиям. Также, в отличие от библиотеки, которая объединяет в себе набор близкой функциональности, — «фреймворк» может содержать в себе большое число разных по тематике библиотек.\n        </p>\n        <br>\n        <p><b>JavaScript-фреймворки</b> — это фреймворки для приложений, написанные на языке программирования JavaScript. JavaScript-фреймворки отличается от Javascript-библиотек потоком управления. Они являются неотъемлемой частью современной веб-разработки, предоставляя разработчикам проверенные и протестированные инструменты для создания масштабируемых и интерактивных веб-приложений. Многие современные компании используют фреймворки для своих решений, поэтому многие задачи связанные с разработкой клиентской части веб-приложений теперь требуют опыта работы с ними.</p>\n        <p>\n            Фреймворки JavaScript имеют ряд преимуществ, которые обеспечивают более эффективную и организованную разработку.\n            <ul>\n                <li><b>Ускорение разработки</b> - предоставляются готовые решения для общих задач (маршрутизация, управление состоянием и взаимодействие с сервером), что позволяет разработчику сосредоточиться на над своими индивидуальными задачами, не тратя время на реализацию базовых функций.</li>\n                <br>\n                <li><b>Организация кода</b> - обычно имеются структуру и рекомендации по организации кода, способствующие поддерживаемости и расширяемости приложений.</li>\n                <li><b>Поддержка сообщества</b> - популярные фреймворки быстро формируют большие сообщества разработчиков, которые предлагают поддержку, обучение и ресурсы, что облегчает поиск решений для проблем и ускоряет процесс разработки.</li>\n            </ul>\n        </p>        \n    </div>\n</main>"],"mappings":";gCAAAA,kBAAA;;;uBAAAC,mBAAA,CAAAC,SAAA,SAAAC,YAAA,CAA2CC,6BAAA;IAAtBC,SAAS,EAAEC,IAAA,CAAAC;EAAQ,wCACxCC,UAuBO,C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}