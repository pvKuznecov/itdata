{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, createStaticVNode as _createStaticVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createStaticVNode(\"<main><div class=\\\"iblock\\\"><p><b>Фреймворк</b> - это некая программная платформа, определяющая структуру программной системы; ПО (программное обеспечение), облегчающее разработку и объединяющее различные компоненты большого программного проекта.</p><p> В случае использования фреймворков в процессе разработки, можно сказать, что &quot;используется каркасный подход&quot; построения программ. В таком случае любая конфигурация программы строится из двух частей: <ul><li>Постоянная часть — каркас, не меняющийся от конфигурации к конфигурации и несущий в себе гнёзда, в которых размещается вторая, переменная часть;</li><li>Сменные модули (или точки расширения).</li></ul> Понятие &quot;фреймворк&quot; отличается от понятия &quot;библиотека&quot; тем, что последнее может быть использована в программном продукте просто как набор подпрограмм, не влияя на архитектуру программного продукта и не накладывая на неё никаких ограничений. В то время как фреймворк определяет правила архитектуры приложения, определяя на начальном этапе разработки «каркас», который нужно будет расширять и изменять согласно указанным требованиям. Также, в отличие от библиотеки, которая объединяет в себе набор близкой функциональности, — «фреймворк» может содержать в себе большое число разных по тематике библиотек. </p><br><br><p>JavaScript-фреймворки являются неотъемлемой частью современной веб-разработки, предоставляя разработчикам проверенные и протестированные инструменты для создания масштабируемых и интерактивных веб-приложений. Многие современные компании используют фреймворки для своих решений, поэтому многие задачи связанные с разработкой клиентской части веб-приложений теперь требуют опыта работы с ними.</p><p>Начинающему разработчику веб-интерфейсов может быть трудно понять с чего начать изучение фреймворков — их выбор разнообразен, а новые появляются постоянно. В основном же они работают аналогичным образом, но делают некоторые вещи по-разному, также есть некоторые специфичные вещи, которые следует соблюдать при использовании фреймворков.</p><p>JavaScript-фреймворк — это фреймворк для приложений, написанный на языке программирования JavaScript. JavaScript-фреймворк отличается от Javascript-библиотеки потоком управления. Библиотека содержит функции для вызова родительским кодом, а фреймворк опирается на структуру приложения в целом.</p> Фреймворки JavaScript имеют ряд преимуществ, которые обеспечивают более эффективную и организованную разработку. — Ускорение разработки. Фреймворки предоставляют готовые решения для общих задач, таких как маршрутизация, управление состоянием и взаимодействие с сервером. Это позволяет разработчикам сосредоточиться на уникальных аспектах своего приложения, не тратя время на реализацию базовых функций. — Организация кода. Фреймворки обычно имеют структуру и рекомендации по организации кода, что способствует поддерживаемости и расширяемости приложений. Разработчики могут использовать заданную структуру для создания модульного и масштабируемого кода. — Поддержка сообщества. Популярные фреймворки имеют большие сообщества разработчиков, которые предлагают поддержку, обучение и ресурсы. Это облегчает поиск решений для проблем и ускоряет процесс разработки. </div></main>\", 1);\nexport function render(_ctx, _cache) {\n  const _component_PagetitleComponent = _resolveComponent(\"PagetitleComponent\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_PagetitleComponent, {\n    titleName: _ctx.areaName\n  }, null, 8 /* PROPS */, [\"titleName\"]), _hoisted_1], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createStaticVNode","_createElementBlock","_Fragment","_createVNode","_component_PagetitleComponent","titleName","_ctx","areaName","_hoisted_1"],"sources":["/home/kup/my_projects/vue/itdata/src/views/JsframeworksView/JsframeworksView.html"],"sourcesContent":["<PagetitleComponent :titleName=\"areaName\"/>\n<main>\n    <div class=\"iblock\">\n        <p><b>Фреймворк</b> - это некая программная платформа, определяющая структуру программной системы; ПО (программное обеспечение), облегчающее разработку и объединяющее различные компоненты большого программного проекта.</p>\n        <p>\n            В случае использования фреймворков в процессе разработки, можно сказать, что \"используется каркасный подход\" построения программ. В таком случае любая конфигурация программы строится из двух частей:\n            <ul>\n                <li>Постоянная часть — каркас, не меняющийся от конфигурации к конфигурации и несущий в себе гнёзда, в которых размещается вторая, переменная часть;</li>\n                <li>Сменные модули (или точки расширения).</li>\n            </ul>\n            Понятие \"фреймворк\" отличается от понятия \"библиотека\" тем, что последнее может быть использована в программном продукте просто как набор подпрограмм, не влияя на архитектуру программного продукта и не накладывая на неё никаких ограничений. В то время как фреймворк определяет правила архитектуры приложения, определяя на начальном этапе разработки «каркас», который нужно будет расширять и изменять согласно указанным требованиям. Также, в отличие от библиотеки, которая объединяет в себе набор близкой функциональности, — «фреймворк» может содержать в себе большое число разных по тематике библиотек.\n        </p>\n        <br><br>\n        <p>JavaScript-фреймворки являются неотъемлемой частью современной веб-разработки, предоставляя разработчикам проверенные и протестированные инструменты для создания масштабируемых и интерактивных веб-приложений. Многие современные компании используют фреймворки для своих решений, поэтому многие задачи связанные с разработкой клиентской части веб-приложений теперь требуют опыта работы с ними.</p>\n        <p>Начинающему разработчику веб-интерфейсов может быть трудно понять с чего начать изучение фреймворков — их выбор разнообразен, а новые появляются постоянно. В основном же они работают аналогичным образом, но делают некоторые вещи по-разному, также есть некоторые специфичные вещи, которые следует соблюдать при использовании фреймворков.</p>\n        <p>JavaScript-фреймворк — это фреймворк для приложений, написанный на языке программирования JavaScript. JavaScript-фреймворк отличается от Javascript-библиотеки потоком управления. Библиотека содержит функции для вызова родительским кодом, а фреймворк опирается на структуру приложения в целом.</p>\n        Фреймворки JavaScript имеют ряд преимуществ, которые обеспечивают более эффективную и организованную разработку. \n\n— Ускорение разработки. Фреймворки предоставляют готовые решения для общих задач, таких как маршрутизация, управление состоянием и взаимодействие с сервером. Это позволяет разработчикам сосредоточиться на уникальных аспектах своего приложения, не тратя время на реализацию базовых функций.\n\n— Организация кода. Фреймворки обычно имеют структуру и рекомендации по организации кода, что способствует поддерживаемости и расширяемости приложений. Разработчики могут использовать заданную структуру для создания модульного и масштабируемого кода.\n\n— Поддержка сообщества. Популярные фреймворки имеют большие сообщества разработчиков, которые предлагают поддержку, обучение и ресурсы. Это облегчает поиск решений для проблем и ускоряет процесс разработки.\n    </div>\n</main>"],"mappings":";gCAAAA,kBAAA;;;uBAAAC,mBAAA,CAAAC,SAAA,SAAAC,YAAA,CAA2CC,6BAAA;IAAtBC,SAAS,EAAEC,IAAA,CAAAC;EAAQ,wCACxCC,UAuBO,C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}